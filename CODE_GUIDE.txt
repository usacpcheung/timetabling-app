This guide walks through the code in this project at a beginner friendly level. It is intended to show how the pieces fit together so you can modify the app or use it as a learning resource.

Project layout
--------------
The repository contains these key files:

* ``README.md`` – overview of the project and how to run it.
* ``CODE_GUIDE.txt`` – this document.
* ``app.py`` – Flask routes and database setup.
* ``cp_sat_timetable.py`` – OR-Tools model builder and solver.
* ``static/`` – front-end files ``style.css`` and ``config.js``.
* ``templates/`` – the HTML templates rendered by Flask.

app.py
------
``app.py`` implements the Flask web server and all database access. When the file is executed it calls ``init_db()`` which creates the SQLite tables and inserts some starter data if the database file does not exist. Key helper functions are:

* ``get_db()`` – opens a database connection and configures rows to behave like dictionaries. Each request uses this to talk to the database.
* ``init_db()`` – creates tables such as ``teachers`` and ``students`` and inserts default rows if they are empty. This function also performs any necessary migrations when new columns are added in later versions of the code.

Route functions decorated with ``@app.route`` handle the HTTP requests sent from the browser:

* ``index`` – simple landing page with links to the other actions and forms to generate or view a timetable.
* ``config`` – long form that lets the user manage teachers, students, groups, subjects and general settings. The route handles both ``GET`` (display the current values) and ``POST`` (save submitted changes) requests. The majority of the validation logic lives here.
* ``generate`` – endpoint used when the user presses *Generate Timetable*. It calls ``generate_schedule`` and redirects back to the index page when done.
* ``check_timetable`` – small AJAX helper used on the index page to warn if a timetable for a given date already exists.
* ``timetable`` – displays the timetable grid for a selected date. It also highlights any subjects each student missed.
* ``attendance`` – summarises attendance information by counting how many times each student attended each subject.
* ``manage_timetables`` / ``delete_timetables`` – pages that list saved timetables and allow the user to delete individual dates or clear everything.
* ``reset_db`` – convenience route to remove the database file and recreate the default data.

The heavy lifting happens in ``generate_schedule``. This function reads all configuration data from the database, builds the CP-SAT model by calling ``build_model`` in ``cp_sat_timetable.py`` and then saves the returned assignments and attendance logs. If the solver reports that no schedule is possible, the unsatisfied constraint groups are flashed to the user so they know which settings caused the issue.

cp_sat_timetable.py
-------------------
This module isolates the OR-Tools logic from the web code. ``build_model`` constructs a ``cp_model.CpModel`` object and fills it with decision variables. Each variable represents a possible lesson for a particular student, teacher, subject and slot. Constraints are added to ensure:

* No teacher or student is booked in two places at once.
* Optional limits on repeated lessons ("Max repeats" and consecutive slots).
* Minimum and maximum numbers of lessons for both teachers and students.
* Groups share lessons using pseudo student ids so the solver treats them like single students.
* Optional objective terms encourage consecutive repeats, group lessons or balanced teacher workloads.

The function can also attach assumption indicators to major constraint groups. When enabled, these indicators help explain which group caused the model to be infeasible.

``solve_and_print`` runs the solver, emitting progress messages for each feasible solution (higher scores indicate better timetables). It returns the chosen assignments, any conflicting assumption groups, and the list of progress messages.

Static files and templates
--------------------------
The ``static/`` directory contains ``style.css`` and ``config.js``. The CSS file provides minimal styling for the pages. ``config.js`` adds interactivity to the configuration form (updating dropdowns, generating slot time fields and showing warnings). The ``templates/`` directory contains Jinja2 templates for the HTML pages served by Flask. Each template mixes HTML with small snippets of Python-like code to insert values from the routes.

