Timetabling App Code Guide
==========================

This guide walks through the most important parts of the project so you can navigate the codebase, understand how the solver is wired up and safely extend the application.

Project layout
--------------
Key directories and files:

* ``app.py`` – Flask application, database access, preset handling and backup utilities. 【F:app.py†L1-L4208】
* ``cp_sat_timetable.py`` – OR-Tools model builder, diagnostics helpers and solver wrapper. 【F:cp_sat_timetable.py†L1-L760】
* ``templates/`` – Jinja templates for the pages served by Flask (configuration, timetable views, attendance, editing and management). 【F:templates/index.html†L1-L160】【F:templates/manage_timetables.html†L1-L140】
* ``static/`` – Client-side helpers such as ``config.js`` (dynamic forms), ``main.js`` (confirmations and edits), ``attendance.js`` (table enhancements) and ``ui.js`` (Flowbite initialisation). 【F:static/config.js†L1-L160】【F:static/main.js†L1-L200】【F:static/attendance.js†L1-L160】【F:static/ui.js†L1-L60】
* ``tests/`` – Pytest suite currently covering validation helpers like student/teacher blocking. 【F:tests/test_block_rules.py†L1-L160】
* ``tools/`` – Maintenance scripts for migrating presets, repairing worksheets and rebuilding snapshots. 【F:tools/cleanup_snapshots.py†L1-L120】

app.py
------
``app.py`` hosts the Flask routes and every interaction with the SQLite database.

### Database helpers and schema management

``get_db`` centralises SQLite connections and configures rows to behave like dictionaries. ``init_db`` creates tables on first run and contains incremental migrations so existing databases pick up new columns like solver time limits, location support and worksheet tracking. ``CONFIG_TABLES`` lists every configuration table included in presets. 【F:app.py†L31-L356】【F:app.py†L43-L72】

### Configuration dumps, presets and snapshots

``dump_configuration`` serialises the tables listed in ``CONFIG_TABLES`` so presets exclude runtime data such as generated timetables. ``restore_configuration`` imports a preset, refreshing archive tables for teachers, groups, locations and subjects that no longer exist while keeping timetable history intact. Preset routes (``/presets`` and related POST handlers) use these helpers to save, load and delete stored configurations. ``get_missing_and_counts`` and ``calculate_missing_and_counts`` cache per-date summaries so timetable pages and editors can quickly show unmet subject requirements, lesson counts and location usage. 【F:app.py†L636-L1208】【F:app.py†L2208-L2268】【F:app.py†L2270-L3415】

### Scheduling pipeline

``generate_schedule`` loads all configuration data (teachers, students, groups, locations, blocks, fixed assignments, attendance stats) and converts them into the structures expected by OR-Tools. After calling ``build_model`` it runs the solver with a configurable time limit, records progress messages, writes assignments into the timetable table and synchronises attendance logs. Missing lessons and worksheet counts are recomputed at the end. ``get_timetable_data`` prepares the grid shown on the timetable page, supporting both teacher and location views and enriching rows with archive names. 【F:app.py†L2899-L3412】

### Route overview

* Landing & timetable viewing: ``index`` renders the home page, ``check_timetable`` warns about existing schedules and ``timetable`` displays a read-only grid for a chosen date. ``generate`` triggers the solver and redirects back with status flashes. 【F:app.py†L1153-L3499】
* Configuration: ``config`` renders and validates the entire configuration form. It manages subjects, students, groups, locations, blocks, unavailability, fixed assignments and worksheet counts with extensive validation before committing changes. 【F:app.py†L1233-L2268】
* Presets: ``/presets`` lists stored snapshots while ``/presets/save``, ``/presets/load`` and ``/presets/delete`` invoke the preset helpers described above. 【F:app.py†L2208-L2268】
* Attendance & management: ``attendance`` aggregates attendance logs for active and archived students. ``manage_timetables`` lists saved timetable dates and available backups, and ``delete_timetables`` removes selected records or clears everything. 【F:app.py†L3490-L3964】
* Editing: ``edit_timetable`` allows manual adjustments, worksheet assignment toggles and snapshot refreshes while keeping attendance logs consistent. 【F:app.py†L3591-L3819】
* Maintenance: ``reset_db`` rebuilds the demo data. Backup routes (``/backup_db``, ``/download_backup/<name>``, ``/restore_db_existing``, ``/restore_db_upload``) create integrity-checked zip archives and restore them safely using temporary copies. 【F:app.py†L3965-L4208】

cp_sat_timetable.py
-------------------
This module isolates the CP-SAT model so optimisation logic stays separate from the web app.

* ``AssumptionInfo`` and ``AssumptionRegistry`` help annotate major constraint groups with assumption literals. When the model is infeasible ``solve_and_print`` can map the solver's unsat core back to human-readable labels. 【F:cp_sat_timetable.py†L1-L83】
* ``build_model`` constructs the decision variables and constraints. It handles group lessons via pseudo student identifiers, applies student and teacher lesson limits, enforces repeat rules (including consecutive slot preferences), respects teacher/student availability, block lists and location restrictions, and adds objective terms for attendance weights, group emphasis and load balancing. Location assignment variables are included when rooms are configured. 【F:cp_sat_timetable.py†L84-L688】
* ``solve_and_print`` runs the CP-SAT solver, optionally reporting intermediate solutions through a callback. It returns the status, chosen assignments, any conflicting assumptions and log messages that are later flashed in the UI. 【F:cp_sat_timetable.py†L690-L760】

Front-end assets and templates
------------------------------
The templates under ``templates/`` render the HTML pages and embed snippets of data passed from the routes. Examples include ``config.html`` for the configuration form, ``timetable.html`` for the read-only grid, ``edit_timetable.html`` for manual adjustments and ``manage_timetables.html`` for housekeeping tasks. 【F:templates/config.html†L1-L400】【F:templates/edit_timetable.html†L1-L360】

Client-side helpers in ``static/`` enhance these pages:

* ``config.js`` updates dropdowns, slot time inputs and warning banners dynamically. 【F:static/config.js†L1-L200】
* ``main.js`` provides confirmation prompts (for timetable overwrites or deletions) and AJAX checks when editing timetables. 【F:static/main.js†L1-L200】
* ``attendance.js`` initialises searchable attendance tables. 【F:static/attendance.js†L1-L160】
* ``ui.js`` bootstraps Flowbite components used across the templates. 【F:static/ui.js†L1-L60】

Tests and tools
---------------
``tests/test_block_rules.py`` demonstrates how to exercise validation helpers such as ``block_allowed``. The ``tools/`` directory contains utility scripts for cleaning or migrating production data (for example refreshing snapshots or updating preset payloads) and can be used as references for one-off maintenance tasks. 【F:tests/test_block_rules.py†L1-L160】【F:tools/cleanup_snapshots.py†L1-L151】

